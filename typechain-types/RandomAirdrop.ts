/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, BigNumber } from "ethers"
export type BigNumberStruct = { val: BytesLike; bitlen: BigNumberish }

export type BigNumberStructOutput = [val: string, bitlen: BigNumber] & {
    val: string
    bitlen: BigNumber
}
export interface SettedUpValues {
    T: string
    n: string
    nl: string
    g: string
    gl: string
    h: string
    hl: string
    commitDuration: string
    commitRevealDuration: string
    setUpTime: string
}

export declare namespace ICommitRevealRecoverRNG {
    export type CommitRevealValueStruct = {
        c: BigNumberStruct
        a: BigNumberStruct
        participantAddress: BytesLike
    }

    export type CommitRevealValueStructOutput = [
        c: BigNumberStructOutput,
        a: BigNumberStructOutput,
        participantAddress: string
    ] & {
        c: BigNumberStructOutput
        a: BigNumberStructOutput
        participantAddress: string
    }

    export type SetUpValueAtRoundStruct = {
        setUpTime: BigNumberish
        commitDuration: BigNumberish
        commitRevealDuration: BigNumberish
        T: BigNumberish
        proofSize: BigNumberish
        n: BigNumberStruct
        g: BigNumberStruct
        h: BigNumberStruct
    }

    export type SetUpValueAtRoundStructOutput = [
        setUpTime: BigNumber,
        commitDuration: BigNumber,
        commitRevealDuration: BigNumber,
        T: BigNumber,
        proofSize: BigNumber,
        n: BigNumberStructOutput,
        g: BigNumberStructOutput,
        h: BigNumberStructOutput
    ] & {
        setUpTime: BigNumber
        commitDuration: BigNumber
        commitRevealDuration: BigNumber
        T: BigNumber
        proofSize: BigNumber
        n: BigNumberStructOutput
        g: BigNumberStructOutput
        h: BigNumberStructOutput
    }

    export type UserAtRoundStruct = {
        index: BigNumberish
        committed: boolean
        revealed: boolean
    }

    export type UserAtRoundStructOutput = [
        index: BigNumber,
        committed: boolean,
        revealed: boolean
    ] & { index: BigNumber; committed: boolean; revealed: boolean }

    export type ValueAtRoundStruct = {
        numOfParticipants: BigNumberish
        count: BigNumberish
        bStar: BytesLike
        commitsString: BytesLike
        omega: BigNumberStruct
        stage: BigNumberish
        isCompleted: boolean
        isAllRevealed: boolean
    }

    export type ValueAtRoundStructOutput = [
        numOfParticipants: BigNumber,
        count: BigNumber,
        bStar: string,
        commitsString: string,
        omega: BigNumberStructOutput,
        stage: BigNumber,
        isCompleted: boolean,
        isAllRevealed: boolean
    ] & {
        numOfParticipants: BigNumber
        count: BigNumber
        bStar: string
        commitsString: string
        omega: BigNumberStructOutput
        stage: BigNumber
        isCompleted: boolean
        isAllRevealed: boolean
    }

    export type VDFClaimStruct = {
        T: BigNumberish
        x: BigNumberStruct
        y: BigNumberStruct
        v: BigNumberStruct
    }

    export type VDFClaimStructOutput = [
        T: BigNumber,
        x: BigNumberStructOutput,
        y: BigNumberStructOutput,
        v: BigNumberStructOutput
    ] & {
        T: BigNumber
        x: BigNumberStructOutput
        y: BigNumberStructOutput
        v: BigNumberStructOutput
    }
}

export namespace CalculatedOmegaEvent {
    export type InputTuple = [
        round: BigNumberish,
        omega: BigNumberStruct,
        calculatedTimestamp: BigNumberish
    ]
    export type OutputTuple = [
        round: BigNumber,
        omega: BigNumberStructOutput,
        calculatedTimestamp: BigNumber
    ]
    export interface OutputObject {
        round: BigNumber
        omega: BigNumberStructOutput
        calculatedTimestamp: BigNumber
    }
}

export namespace CommitCEvent {
    export type InputTuple = [
        participant: BytesLike,
        commit: BigNumberStruct,
        commitsString: BytesLike,
        commitCount: BigNumberish,
        commitTimestamp: BigNumberish
    ]
    export type OutputTuple = [
        participant: string,
        commit: BigNumberStructOutput,
        commitsString: string,
        commitCount: BigNumber,
        commitTimestamp: BigNumber
    ]
    export interface OutputObject {
        participant: string
        commit: BigNumberStructOutput
        commitsString: string
        commitCount: BigNumber
        commitTimestamp: BigNumber
    }
}

export namespace RandomAirdropRegisteredAtRoundEvent {
    export type InputTuple = [_entrant: BytesLike, _timestamp: BigNumberish]
    export type OutputTuple = [_entrant: string, _timestamp: BigNumber]
    export interface OutputObject {
        _entrant: string
        _timestamp: BigNumber
    }
}

export namespace RecoveredEvent {
    export type InputTuple = [
        msgSender: BytesLike,
        recov: BigNumberStruct,
        omegaRecov: BigNumberStruct,
        recoveredTimestamp: BigNumberish
    ]
    export type OutputTuple = [
        msgSender: string,
        recov: BigNumberStructOutput,
        omegaRecov: BigNumberStructOutput,
        recoveredTimestamp: BigNumber
    ]
    export interface OutputObject {
        msgSender: string
        recov: BigNumberStructOutput
        omegaRecov: BigNumberStructOutput
        recoveredTimestamp: BigNumber
    }
}

export namespace RegisteredEvent {
    export type InputTuple = [_entrant: BytesLike, _timestamp: BigNumberish]
    export type OutputTuple = [_entrant: string, _timestamp: BigNumber]
    export interface OutputObject {
        _entrant: string
        _timestamp: BigNumber
    }
}

export namespace RevealAEvent {
    export type InputTuple = [
        participant: BytesLike,
        a: BigNumberStruct,
        revealLeftCount: BigNumberish,
        revealTimestamp: BigNumberish
    ]
    export type OutputTuple = [
        participant: string,
        a: BigNumberStructOutput,
        revealLeftCount: BigNumber,
        revealTimestamp: BigNumber
    ]
    export interface OutputObject {
        participant: string
        a: BigNumberStructOutput
        revealLeftCount: BigNumber
        revealTimestamp: BigNumber
    }
}

export namespace SetUpEvent {
    export type InputTuple = [
        msgSender: BytesLike,
        setUpTime: BigNumberish,
        commitDuration: BigNumberish,
        commitRevealDuration: BigNumberish,
        n: BigNumberStruct,
        g: BigNumberStruct,
        h: BigNumberStruct,
        T: BigNumberish,
        round: BigNumberish
    ]
    export type OutputTuple = [
        msgSender: string,
        setUpTime: BigNumber,
        commitDuration: BigNumber,
        commitRevealDuration: BigNumber,
        n: BigNumberStructOutput,
        g: BigNumberStructOutput,
        h: BigNumberStructOutput,
        T: BigNumber,
        round: BigNumber
    ]
    export interface OutputObject {
        msgSender: string
        setUpTime: BigNumber
        commitDuration: BigNumber
        commitRevealDuration: BigNumber
        n: BigNumberStructOutput
        g: BigNumberStructOutput
        h: BigNumberStructOutput
        T: BigNumber
        round: BigNumber
    }
}
